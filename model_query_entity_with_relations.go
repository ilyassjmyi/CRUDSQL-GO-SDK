/*
CrudSQL API

A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models CrudSQL provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger documentation - Multiple database support (SQL & NoSQL)

API version: 1.0.0
Contact: taqi@mobix.biz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryEntityWithRelations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryEntityWithRelations{}

// QueryEntityWithRelations struct for QueryEntityWithRelations
type QueryEntityWithRelations struct {
	MainEntity map[string]interface{} `json:"mainEntity,omitempty"`
	Relations *map[string][]map[string]interface{} `json:"relations,omitempty"`
}

// NewQueryEntityWithRelations instantiates a new QueryEntityWithRelations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryEntityWithRelations() *QueryEntityWithRelations {
	this := QueryEntityWithRelations{}
	return &this
}

// NewQueryEntityWithRelationsWithDefaults instantiates a new QueryEntityWithRelations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryEntityWithRelationsWithDefaults() *QueryEntityWithRelations {
	this := QueryEntityWithRelations{}
	return &this
}

// GetMainEntity returns the MainEntity field value if set, zero value otherwise.
func (o *QueryEntityWithRelations) GetMainEntity() map[string]interface{} {
	if o == nil || IsNil(o.MainEntity) {
		var ret map[string]interface{}
		return ret
	}
	return o.MainEntity
}

// GetMainEntityOk returns a tuple with the MainEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryEntityWithRelations) GetMainEntityOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MainEntity) {
		return map[string]interface{}{}, false
	}
	return o.MainEntity, true
}

// HasMainEntity returns a boolean if a field has been set.
func (o *QueryEntityWithRelations) HasMainEntity() bool {
	if o != nil && !IsNil(o.MainEntity) {
		return true
	}

	return false
}

// SetMainEntity gets a reference to the given map[string]interface{} and assigns it to the MainEntity field.
func (o *QueryEntityWithRelations) SetMainEntity(v map[string]interface{}) {
	o.MainEntity = v
}

// GetRelations returns the Relations field value if set, zero value otherwise.
func (o *QueryEntityWithRelations) GetRelations() map[string][]map[string]interface{} {
	if o == nil || IsNil(o.Relations) {
		var ret map[string][]map[string]interface{}
		return ret
	}
	return *o.Relations
}

// GetRelationsOk returns a tuple with the Relations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryEntityWithRelations) GetRelationsOk() (*map[string][]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Relations) {
		return nil, false
	}
	return o.Relations, true
}

// HasRelations returns a boolean if a field has been set.
func (o *QueryEntityWithRelations) HasRelations() bool {
	if o != nil && !IsNil(o.Relations) {
		return true
	}

	return false
}

// SetRelations gets a reference to the given map[string][]map[string]interface{} and assigns it to the Relations field.
func (o *QueryEntityWithRelations) SetRelations(v map[string][]map[string]interface{}) {
	o.Relations = &v
}

func (o QueryEntityWithRelations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryEntityWithRelations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MainEntity) {
		toSerialize["mainEntity"] = o.MainEntity
	}
	if !IsNil(o.Relations) {
		toSerialize["relations"] = o.Relations
	}
	return toSerialize, nil
}

type NullableQueryEntityWithRelations struct {
	value *QueryEntityWithRelations
	isSet bool
}

func (v NullableQueryEntityWithRelations) Get() *QueryEntityWithRelations {
	return v.value
}

func (v *NullableQueryEntityWithRelations) Set(val *QueryEntityWithRelations) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryEntityWithRelations) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryEntityWithRelations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryEntityWithRelations(val *QueryEntityWithRelations) *NullableQueryEntityWithRelations {
	return &NullableQueryEntityWithRelations{value: val, isSet: true}
}

func (v NullableQueryEntityWithRelations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryEntityWithRelations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


