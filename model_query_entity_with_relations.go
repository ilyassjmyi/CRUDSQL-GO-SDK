/*
CrudSQL API

A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models CrudSQL provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger documentation - Multiple database support (SQL & NoSQL)

API version: 1.0.0
Contact: taqi@mobix.biz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryEntityWithRelations type satisfies the MappedNullable interface at compile time
// checks if the QueryEntityWithRelations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryEntityWithRelations{}

// QueryEntityWithRelations struct for QueryEntityWithRelations
type QueryEntityWithRelations struct {
    MainEntity json.RawMessage `json:"mainEntity,omitempty"`
    Relations *map[string][]map[string]interface{} `json:"relations,omitempty"`
}

// NewQueryEntityWithRelations instantiates a new QueryEntityWithRelations object
func NewQueryEntityWithRelations() *QueryEntityWithRelations {
    this := QueryEntityWithRelations{}
    return &this
}

// NewQueryEntityWithRelationsWithDefaults instantiates a new QueryEntityWithRelations object with defaults
func NewQueryEntityWithRelationsWithDefaults() *QueryEntityWithRelations {
    this := QueryEntityWithRelations{}
    return &this
}

// GetMainEntity returns the MainEntity field value as map[string]interface{}
func (o *QueryEntityWithRelations) GetMainEntity() map[string]interface{} {
    if o == nil || len(o.MainEntity) == 0 {
        return nil
    }
    
    var result map[string]interface{}
    err := json.Unmarshal(o.MainEntity, &result)
    if err != nil {
        return nil
    }
    return result
}

// GetMainEntityRaw returns the raw JSON data
func (o *QueryEntityWithRelations) GetMainEntityRaw() json.RawMessage {
    if o == nil {
        return nil
    }
    return o.MainEntity
}

// GetMainEntityOk returns a tuple with the MainEntity field value if set, nil otherwise
func (o *QueryEntityWithRelations) GetMainEntityOk() (map[string]interface{}, bool) {
    if o == nil || len(o.MainEntity) == 0 {
        return nil, false
    }
    
    var result map[string]interface{}
    err := json.Unmarshal(o.MainEntity, &result)
    if err != nil {
        return nil, false
    }
    return result, true
}

// HasMainEntity returns a boolean if a field has been set
func (o *QueryEntityWithRelations) HasMainEntity() bool {
    return o != nil && len(o.MainEntity) > 0
}

// SetMainEntity sets the MainEntity field
func (o *QueryEntityWithRelations) SetMainEntity(v interface{}) error {
    if v == nil {
        o.MainEntity = nil
        return nil
    }
    
    data, err := json.Marshal(v)
    if err != nil {
        return err
    }
    o.MainEntity = data
    return nil
}

// GetRelations returns the Relations field value if set
func (o *QueryEntityWithRelations) GetRelations() map[string][]map[string]interface{} {
    if o == nil || IsNil(o.Relations) {
        var ret map[string][]map[string]interface{}
        return ret
    }
    return *o.Relations
}

// GetRelationsOk returns a tuple with the Relations field value if set
func (o *QueryEntityWithRelations) GetRelationsOk() (*map[string][]map[string]interface{}, bool) {
    if o == nil || IsNil(o.Relations) {
        return nil, false
    }
    return o.Relations, true
}

// HasRelations returns a boolean if Relations field has been set
func (o *QueryEntityWithRelations) HasRelations() bool {
    return o != nil && !IsNil(o.Relations)
}

// SetRelations sets the Relations field
func (o *QueryEntityWithRelations) SetRelations(v map[string][]map[string]interface{}) {
    o.Relations = &v
}

func (o QueryEntityWithRelations) MarshalJSON() ([]byte, error) {
    toSerialize, err := o.ToMap()
    if err != nil {
        return []byte{}, err
    }
    return json.Marshal(toSerialize)
}

func (o QueryEntityWithRelations) ToMap() (map[string]interface{}, error) {
    toSerialize := map[string]interface{}{}
    if len(o.MainEntity) > 0 {
        var mainEntity interface{}
        err := json.Unmarshal(o.MainEntity, &mainEntity)
        if err != nil {
            return nil, err
        }
        toSerialize["mainEntity"] = mainEntity
    }
    if !IsNil(o.Relations) {
        toSerialize["relations"] = o.Relations
    }
    return toSerialize, nil
}

// UnmarshalJSON handles both direct object and wrapped object cases
func (o *QueryEntityWithRelations) UnmarshalJSON(data []byte) error {
    // Try first as a direct object
    var directObject map[string]interface{}
    if err := json.Unmarshal(data, &directObject); err == nil {
        if _, hasMainEntity := directObject["mainEntity"]; hasMainEntity {
            // This is the normal case, unmarshal normally
            type Alias QueryEntityWithRelations
            var tmp Alias
            if err := json.Unmarshal(data, &tmp); err != nil {
                return err
            }
            *o = QueryEntityWithRelations(tmp)
            return nil
        }
        // If no mainEntity field, treat the whole object as mainEntity
        o.MainEntity = data
        return nil
    }
    return nil
}
type NullableQueryEntityWithRelations struct {
	value *QueryEntityWithRelations
	isSet bool
}

func (v NullableQueryEntityWithRelations) Get() *QueryEntityWithRelations {
	return v.value
}

func (v *NullableQueryEntityWithRelations) Set(val *QueryEntityWithRelations) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryEntityWithRelations) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryEntityWithRelations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryEntityWithRelations(val *QueryEntityWithRelations) *NullableQueryEntityWithRelations {
	return &NullableQueryEntityWithRelations{value: val, isSet: true}
}

func (v NullableQueryEntityWithRelations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryEntityWithRelations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


